[{"F:\\JS\\todolist\\src\\index.tsx":"1","F:\\JS\\todolist\\src\\reportWebVitals.ts":"2","F:\\JS\\todolist\\src\\api\\todolists-api.ts":"3","F:\\JS\\todolist\\src\\app\\store.ts":"4","F:\\JS\\todolist\\src\\app\\App.tsx":"5","F:\\JS\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts":"6","F:\\JS\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts":"7","F:\\JS\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx":"8","F:\\JS\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","F:\\JS\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx":"10","F:\\JS\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"11","F:\\JS\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx":"12","F:\\JS\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"13","F:\\JS\\todolist\\src\\utils\\error-utils.ts":"14","F:\\JS\\todolist\\src\\app\\app-reducer.ts":"15","F:\\JS\\todolist\\src\\features\\Login\\Login.tsx":"16","F:\\JS\\todolist\\src\\features\\Login\\authReducer.ts":"17"},{"size":752,"mtime":1631203639283,"results":"18","hashOfConfig":"19"},{"size":463,"mtime":1631280311056,"results":"20","hashOfConfig":"19"},{"size":3081,"mtime":1633192801685,"results":"21","hashOfConfig":"19"},{"size":804,"mtime":1633264869489,"results":"22","hashOfConfig":"19"},{"size":2721,"mtime":1633263396611,"results":"23","hashOfConfig":"19"},{"size":5417,"mtime":1633264726166,"results":"24","hashOfConfig":"19"},{"size":4068,"mtime":1633264869504,"results":"25","hashOfConfig":"19"},{"size":3920,"mtime":1633264887423,"results":"26","hashOfConfig":"19"},{"size":4123,"mtime":1633178327124,"results":"27","hashOfConfig":"19"},{"size":1569,"mtime":1631280311013,"results":"28","hashOfConfig":"19"},{"size":1773,"mtime":1596295538000,"results":"29","hashOfConfig":"19"},{"size":948,"mtime":1631280311108,"results":"30","hashOfConfig":"19"},{"size":1102,"mtime":1632671910653,"results":"31","hashOfConfig":"19"},{"size":714,"mtime":1632673883398,"results":"32","hashOfConfig":"19"},{"size":1060,"mtime":1632673419591,"results":"33","hashOfConfig":"19"},{"size":3919,"mtime":1633192801670,"results":"34","hashOfConfig":"19"},{"size":3229,"mtime":1633263349860,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"114y99b",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\JS\\todolist\\src\\index.tsx",[],["77","78"],"F:\\JS\\todolist\\src\\reportWebVitals.ts",[],"F:\\JS\\todolist\\src\\api\\todolists-api.ts",[],"F:\\JS\\todolist\\src\\app\\store.ts",[],"F:\\JS\\todolist\\src\\app\\App.tsx",["79"],"import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/authReducer\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const onCLickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar className={'headerWrapper'}>\r\n                    <div className={'leftSideWrapper'}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                    </div>\r\n                    {isLoggedIn &&\r\n                    <Button className={'logoutBtn'} color=\"inherit\" onClick={onCLickHandler}>Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","F:\\JS\\todolist\\src\\features\\TodolistsList\\tasks-reducer.ts",[],"F:\\JS\\todolist\\src\\features\\TodolistsList\\todolists-reducer.ts",["80","81"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const fetchTodoListsTC = createAsyncThunk('todoLists/fetchTodoLists', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.getTodolists()\r\n        return {todoLists: res.data}\r\n    } catch (error) {\r\n        return rejectWithValue(error)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todoLists/removeTodoList', async (todoListId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todoListId, status: 'loading'}))\r\n        await todolistsAPI.deleteTodolist(todoListId)\r\n        return {id: todoListId}\r\n    } catch (error) {\r\n        return rejectWithValue(error)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todoLists/addTodoList', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        return {todolist: res.data.data.item}\r\n    } catch (error) {\r\n        return rejectWithValue(error)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk('todoLists/changeTodoListTitle', async (param:{id: string, title: string}, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        return {id: param.id, title: param.title}\r\n    } catch (error) {\r\n        return rejectWithValue(error)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n            return action.payload.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\nexport const todoListsReducer = slice.reducer\r\n// actions\r\nexport const {\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistFilterAC,\r\n} = slice.actions\r\n// thunks\r\n\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","F:\\JS\\todolist\\src\\features\\TodolistsList\\TodolistsList.tsx",["82","83","84","85","86","87","88","89"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodoListsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel:{status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel:{title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","F:\\JS\\todolist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["90","91","92","93","94","95"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasks} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasks(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","F:\\JS\\todolist\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"F:\\JS\\todolist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["96","97","98"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","F:\\JS\\todolist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"F:\\JS\\todolist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"F:\\JS\\todolist\\src\\utils\\error-utils.ts",[],"F:\\JS\\todolist\\src\\app\\app-reducer.ts",[],"F:\\JS\\todolist\\src\\features\\Login\\Login.tsx",["99"],"import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from './authReducer';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]{4,}$/i.test(values.password)) {\r\n                errors.password = 'Password must be longer than 3 symbols';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            await dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","F:\\JS\\todolist\\src\\features\\Login\\authReducer.ts",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":24,"column":8,"nodeType":"106","endLine":24,"endColumn":10,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":9,"nodeType":"110","messageId":"111","endLine":2,"endColumn":17},{"ruleId":"108","severity":1,"message":"112","line":59,"column":15,"nodeType":"110","messageId":"111","endLine":59,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":30,"column":8,"nodeType":"106","endLine":30,"endColumn":10,"suggestions":"113"},{"ruleId":"104","severity":1,"message":"114","line":35,"column":8,"nodeType":"106","endLine":35,"endColumn":10,"suggestions":"115"},{"ruleId":"104","severity":1,"message":"114","line":40,"column":8,"nodeType":"106","endLine":40,"endColumn":10,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"114","line":45,"column":8,"nodeType":"106","endLine":45,"endColumn":10,"suggestions":"117"},{"ruleId":"104","severity":1,"message":"114","line":50,"column":8,"nodeType":"106","endLine":50,"endColumn":10,"suggestions":"118"},{"ruleId":"104","severity":1,"message":"114","line":55,"column":8,"nodeType":"106","endLine":55,"endColumn":10,"suggestions":"119"},{"ruleId":"104","severity":1,"message":"114","line":60,"column":8,"nodeType":"106","endLine":60,"endColumn":10,"suggestions":"120"},{"ruleId":"104","severity":1,"message":"114","line":65,"column":8,"nodeType":"106","endLine":65,"endColumn":10,"suggestions":"121"},{"ruleId":"104","severity":1,"message":"122","line":32,"column":8,"nodeType":"106","endLine":32,"endColumn":10,"suggestions":"123"},{"ruleId":"104","severity":1,"message":"124","line":36,"column":8,"nodeType":"106","endLine":36,"endColumn":42,"suggestions":"125"},{"ruleId":"104","severity":1,"message":"124","line":43,"column":8,"nodeType":"106","endLine":43,"endColumn":54,"suggestions":"126"},{"ruleId":"104","severity":1,"message":"124","line":45,"column":95,"nodeType":"106","endLine":45,"endColumn":134,"suggestions":"127"},{"ruleId":"104","severity":1,"message":"124","line":46,"column":101,"nodeType":"106","endLine":46,"endColumn":140,"suggestions":"128"},{"ruleId":"104","severity":1,"message":"124","line":47,"column":107,"nodeType":"106","endLine":47,"endColumn":146,"suggestions":"129"},{"ruleId":"104","severity":1,"message":"124","line":15,"column":97,"nodeType":"106","endLine":15,"endColumn":130,"suggestions":"130"},{"ruleId":"104","severity":1,"message":"124","line":20,"column":8,"nodeType":"106","endLine":20,"endColumn":41,"suggestions":"131"},{"ruleId":"104","severity":1,"message":"124","line":24,"column":8,"nodeType":"106","endLine":24,"endColumn":41,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":68,"column":29,"nodeType":"135","messageId":"136","endLine":69,"endColumn":50,"fix":"137"},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["140"],"@typescript-eslint/no-unused-vars","'Dispatch' is defined but never used.","Identifier","unusedVar","'res' is assigned a value but never used.",["141"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["142"],["143"],["144"],["145"],["146"],["147"],["148"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.todolist.id'. Either include them or remove the dependency array.",["149"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["150"],["151"],["152"],["153"],["154"],["155"],["156"],["157"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"158","text":"159"},"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"160","fix":"162"},{"desc":"160","fix":"163"},{"desc":"160","fix":"164"},{"desc":"160","fix":"165"},{"desc":"160","fix":"166"},{"desc":"160","fix":"167"},{"desc":"160","fix":"168"},{"desc":"160","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"172","fix":"174"},{"desc":"172","fix":"175"},{"desc":"172","fix":"176"},{"desc":"172","fix":"177"},{"desc":"172","fix":"178"},{"desc":"172","fix":"179"},{"desc":"172","fix":"180"},[2152,2152]," rel=\"noreferrer\"","Update the dependencies array to be: [dispatch]",{"range":"181","text":"182"},{"range":"183","text":"182"},{"range":"184","text":"182"},{"range":"185","text":"182"},{"range":"186","text":"182"},{"range":"187","text":"182"},{"range":"188","text":"182"},{"range":"189","text":"182"},{"range":"190","text":"182"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"191","text":"192"},"Update the dependencies array to be: [props]",{"range":"193","text":"194"},{"range":"195","text":"194"},{"range":"196","text":"194"},{"range":"197","text":"194"},{"range":"198","text":"194"},{"range":"199","text":"194"},{"range":"200","text":"194"},{"range":"201","text":"194"},[1170,1172],"[dispatch]",[1190,1192],[1371,1373],[1544,1546],[1771,1773],[2006,2008],[2221,2223],[2368,2370],[2549,2551],[1394,1396],"[dispatch, props.todolist.id]",[1511,1545],"[props]",[1776,1822],[1921,1960],[2063,2102],[2211,2250],[765,798],[1071,1104],[1261,1294]]