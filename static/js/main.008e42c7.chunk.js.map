{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","placeholder","InputProps","startAdornment","InputAdornment","position","TextFormatRounded","helperText","IconButton","color","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","onFilterClickHandler","filterValue","changeTodoListFilter","todoListID","style","textAlign","newValue","changeTodoListTitle","addTask","listStyle","paddingLeft","tasks","map","t","id","Checkbox","checked","isDone","event","changeTaskStatus","icon","CheckCircleRounded","checkedIcon","className","changeTaskTitle","removeTask","DeleteRounded","ButtonGroup","aria-label","Button","margin","todoListFilter","removeTodoList","App","todoListId_1","v1","todoListId_2","filter","todoLists","setTodoLists","setTasks","taskID","newTask","tl","todoListsComponents","tasksForTodoList","Grid","item","Paper","padding","AppBar","Toolbar","justifyContent","edge","Menu","Typography","Container","fixed","container","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.008e42c7.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, InputAdornment, TextField} from \"@material-ui/core\";\r\nimport {AddBox, TextFormatRounded} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<null | string>('')\r\n\r\n    const addItem = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                placeholder=\"Title\"\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <TextFormatRounded />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n                error={!!error}\r\n                helperText={!!error && error}\r\n            />\r\n            <IconButton color=\"primary\" size={'small'} onClick={addItem}>\r\n                <AddBox fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {InputAdornment, TextField} from \"@material-ui/core\";\r\nimport {TextFormatRounded} from \"@material-ui/icons\";\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    function activateEditMode() {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n\r\n    function activateViewMode() {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    return (editMode ?\r\n            <TextField\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={changeTitle}\r\n                autoFocus\r\n                onBlur={activateViewMode}\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <TextFormatRounded/>\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            /> :\r\n            <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, colors, IconButton} from \"@material-ui/core\";\r\nimport {CheckCircleRounded,DeleteRounded,} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    todoListID: string\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeTodoListFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todoListID: string) => void\r\n    changeTodoListTitle: (newValue: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    todoListFilter: FilterValuesType\r\n\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID);\r\n    }\r\n\r\n    const onFilterClickHandler = (filterValue: FilterValuesType) => {\r\n        return () => props.changeTodoListFilter(filterValue, props.todoListID);\r\n    }\r\n\r\n    const onClickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n    const onChangeTitleHandler = (newValue: string) => {\r\n        props.changeTodoListTitle(newValue, props.todoListID)\r\n    }\r\n\r\n    return <div>\r\n        <h3 style={{textAlign: \"center\"}}>\r\n            <EditableSpan title={props.title} onChange={onChangeTitleHandler}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div style={{listStyle: \"none\", paddingLeft: \"0px\" }}>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.todoListID)\r\n                    const isDoneHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(t.id, event.currentTarget.checked, props.todoListID)\r\n                    }\r\n\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.todoListID)\r\n                    }\r\n\r\n\r\n                    return <div key={t.id}>\r\n                        <Checkbox\r\n                            size={'small'}\r\n                            color={'primary'}\r\n                            checked={t.isDone}\r\n                            onChange={isDoneHandler}\r\n                            icon={<CheckCircleRounded />}\r\n                            checkedIcon={<CheckCircleRounded />}\r\n                        />\r\n                        <span className={t.isDone ? 'isDone' : ''}>\r\n                        <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                        </span>\r\n                        <IconButton size={'small'} onClick={onClickHandler}>\r\n                            <DeleteRounded fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <ButtonGroup variant=\"text\" aria-label=\"text primary button group\">\r\n            <Button\r\n                size=\"small\"\r\n                style={{margin: \"3px\"}}\r\n                color={props.todoListFilter === 'All' ? 'secondary' : 'primary'}\r\n                onClick={onFilterClickHandler(\"All\")}>\r\n                All\r\n            </Button>\r\n            <Button\r\n                size=\"small\"\r\n                style={{margin: \"3px\"}}\r\n                color={props.todoListFilter === 'Active' ? 'secondary' : 'primary'}\r\n                onClick={onFilterClickHandler(\"Active\")}>\r\n                Active\r\n            </Button>\r\n            <Button\r\n                size=\"small\"\r\n                style={{margin: \"3px\"}}\r\n                color={props.todoListFilter === 'Completed' ? 'secondary' : 'primary'}\r\n                onClick={onFilterClickHandler(\"Completed\")}>\r\n                Completed\r\n            </Button>\r\n        </ButtonGroup>\r\n            <IconButton style={{margin: \"10px 0 0 45px\"}} size={'small'} onClick={onClickRemoveTodoList}>\r\n                <DeleteRounded color={'primary'}/>\r\n            </IconButton>\r\n\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\";\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodolistPropsType>>([\r\n        {\r\n            id: todoListId_1,\r\n            title: 'What to learn',\r\n            filter: \"All\"\r\n        },\r\n        {\r\n            id: todoListId_2,\r\n            title: 'What to buy',\r\n            filter: \"All\"\r\n        }\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Books\", isDone: false},\r\n            {id: v1(), title: \"Notebook\", isDone: true},\r\n            {id: v1(), title: \"Scooter\", isDone: false},\r\n            {id: v1(), title: \"Car\", isDone: true},\r\n            {id: v1(), title: \"BTC\", isDone: false},\r\n        ]\r\n\r\n    })\r\n\r\n    //////\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask = {id: v1(), title: title, isDone: false};\r\n        tasks[todoListID] = [newTask, ...tasks[todoListID]];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => {\r\n            if (t.id === taskID) {\r\n                return {...t, isDone: isDone}\r\n            }\r\n            return t\r\n        })\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodoListFilter(value: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter: value} : tl))\r\n\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoList: TodolistPropsType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"All\"\r\n        }\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({...tasks, [newTodoList.id]: []})\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => {\r\n            if (t.id === id) {\r\n                t.title = title\r\n            }\r\n            return t\r\n        })\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        todoLists = todoLists.map(tl => {\r\n            if (tl.id === todoListID) {\r\n                tl.title = title\r\n            }\r\n            return tl\r\n        })\r\n        setTodoLists([...todoLists]);\r\n    }\r\n\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id];\r\n\r\n        if (tl.filter === 'Active') {\r\n            tasksForTodoList = tasks[tl.id].filter(t => t.isDone === false)\r\n        }\r\n        if (tl.filter === 'Completed') {\r\n            tasksForTodoList = tasks[tl.id].filter(t => t.isDone === true)\r\n        }\r\n\r\n        return <Grid item key={tl.id}>\r\n            <Paper style={{padding: \"10px\"}}>\r\n                <Todolist\r\n                    todoListID={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodoList}\r\n                    removeTask={removeTask}\r\n                    changeTodoListFilter={changeTodoListFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodoList={removeTodoList}\r\n                    todoListFilter={tl.filter}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n\r\n    return (\r\n        <div className={\"App\"}>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button variant={\"outlined\"} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}