{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/authReducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","loginForm","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","setIsInitializedAC","appReducer","reducer","actions","fetchTodoListsTC","createAsyncThunk","param","a","dispatch","rejectWithValue","res","todoLists","data","removeTodolistTC","todoListId","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","unshift","todoListsReducer","handleServerAppError","messages","length","handleServerNetworkError","message","fetchTasks","thunkAPI","tasks","items","removeTaskTC","addTaskTC","resultCode","task","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","domainModel","updateTaskAC","forEach","tasksReducer","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","todolists","useSelector","isLoggedIn","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","loginTC","errors","fieldsError","err","fieldErrors","undefined","logoutTC","setIsLoggedInAC","initializeAppTC","authReducer","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","resetForm","justify","xs","FormControl","handleSubmit","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50234095.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd5ee63b2-b8ea-4e76-b89c-c960812b3f51'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(loginForm: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', loginForm);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<UserDataType>>('/auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType ={\r\n    error: string\r\n    field: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsError?: FieldErrorType[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type UserDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers:{\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>){\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>){\r\n            state.status = action.payload.status\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>){\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const {setAppErrorAC , setIsInitializedAC, setAppStatusAC} = slice.actions\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const fetchTodoListsTC = createAsyncThunk('todoLists/fetchTodoLists', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.getTodolists()\r\n        return {todoLists: res.data}\r\n    } catch (error) {\r\n        return rejectWithValue(error)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todoLists/removeTodoList', async (todoListId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todoListId, status: 'loading'}))\r\n        await todolistsAPI.deleteTodolist(todoListId)\r\n        return {id: todoListId}\r\n    } catch (error) {\r\n        return rejectWithValue(error)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todoLists/addTodoList', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        return {todolist: res.data.data.item}\r\n    } catch (error) {\r\n        return rejectWithValue(error)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk('todoLists/changeTodoListTitle', async (param:{id: string, title: string}, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    try {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        return {id: param.id, title: param.title}\r\n    } catch (error) {\r\n        return rejectWithValue(error)\r\n    } finally {\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todoLists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n            return action.payload.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            return state.filter(tl => tl.id !== action.payload.id)\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\nexport const todoListsReducer = slice.reducer\r\n// actions\r\nexport const {\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistFilterAC,\r\n} = slice.actions\r\n// thunks\r\n\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC,} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolistTC, fetchTodoListsTC, removeTodolistTC} from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId);\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {tasks: res.data.items, todolistId}\r\n    }catch (error) {\r\n       return thunkAPI.rejectWithValue(error)\r\n    }\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('task/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    try {\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    }catch (error) {\r\n       return thunkAPI.rejectWithValue(error)\r\n    }\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('task/addTask', async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    try{\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {task: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue(res.data.messages)\r\n            }\r\n        } catch (error){\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(error)\r\n        }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('task/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('error')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    try{\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return {taskId: param.taskId, model: param.domainModel, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue(res.data.messages)\r\n        }\r\n    }catch(error){\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return  thunkAPI.rejectWithValue(error)\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            state[action.payload.todolistId] = state[action.payload.todolistId]\r\n                .map(t => t.id === action.payload.taskId ? {...t, ...action.payload.model} : t)\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n            action.payload.todoLists.forEach((tl) => state[tl.id] = [])\r\n        })\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = state[action.payload.todolistId].filter(t => t.id !== action.payload.taskId)\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId] = [action.payload.task, ...state[action.payload.task.todoListId]]\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = state[action.payload.todolistId]\r\n                .map(t => t.id === action.payload.taskId ? {...t, ...action.payload.model} : t)\r\n        })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const {updateTaskAC} = slice.actions\r\n// thunks\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasks} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasks(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodoListsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel:{status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel:{title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/todolist/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error : null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {setAppStatusAC, setIsInitializedAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport const loginTC = createAsyncThunk('auth/login', async (data: LoginParamsType, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            return {value: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsError: res.data.fieldsError})\r\n        }\r\n    } catch (error) {\r\n        const err: AxiosError = error\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [err.message], fieldErrors: undefined})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setIsLoggedInAC({value: false}))\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n        }\r\n    } catch (error) {\r\n        const err: AxiosError = error\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [err.message], fieldErrors: undefined})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const initializeAppTC = createAsyncThunk('auth/initializeApp', async (param, thunkAPI) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsError: res.data.fieldsError})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(error)\r\n    } finally {\r\n        thunkAPI.dispatch(setIsInitializedAC({isInitialized: true}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.value\r\n        })\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\n\r\nconst {setIsLoggedInAC} = slice.actions\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from './authReducer';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]{4,}$/i.test(values.password)) {\r\n                errors.password = 'Password must be longer than 3 symbols';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            await dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/todolist'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/authReducer\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const onCLickHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar className={'headerWrapper'}>\r\n                    <div className={'leftSideWrapper'}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                    </div>\r\n                    {isLoggedIn &&\r\n                    <Button className={'logoutBtn'} color=\"inherit\" onClick={onCLickHandler}>Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color={'secondary'}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/todolist'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/todolist/login'} render={() => <Login/>}/>\r\n                    <Route path={'/todolist/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/todolist/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport { todoListsReducer } from '../features/TodolistsList/todolists-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}