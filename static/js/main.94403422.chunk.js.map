{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","store/TaskReducer.ts","store/TodoListReducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","size","variant","value","onChange","e","currentTarget","onKeyPress","key","placeholder","InputProps","startAdornment","InputAdornment","position","TextFormatRounded","helperText","IconButton","color","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","onFilterClickHandler","filterValue","changeTodoListFilter","todoListID","style","textAlign","newValue","changeTodoListTitle","addTask","listStyle","paddingLeft","tasks","map","t","id","Checkbox","checked","isDone","event","changeTaskStatus","icon","CheckCircleRounded","checkedIcon","className","changeTaskTitle","removeTask","DeleteRounded","ButtonGroup","aria-label","Button","margin","todoListFilter","removeTodoList","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskID","type","removeTaskAC","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","changeTodoListFilterAC","action","removeTodoListAC","toddListID","changeTodoListTitleAC","todoListsComponents","tl","tasksForTodoList","filter","Grid","item","Paper","padding","AppBar","Toolbar","justifyContent","edge","Menu","Typography","Container","fixed","container","v1","addTodoListAC","spacing","rootReducer","combineReducers","m","stateCopy","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.94403422.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, InputAdornment, TextField} from \"@material-ui/core\";\r\nimport {AddBox, TextFormatRounded} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<null | string>('')\r\n\r\n    const addItem = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                placeholder=\"Title\"\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <TextFormatRounded />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n                error={!!error}\r\n                helperText={!!error && error}\r\n            />\r\n            <IconButton color=\"primary\" size={'small'} onClick={addItem}>\r\n                <AddBox fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {InputAdornment, TextField} from \"@material-ui/core\";\r\nimport {TextFormatRounded} from \"@material-ui/icons\";\r\n\r\ntype  EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    function activateEditMode() {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n\r\n    function activateViewMode() {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    return (editMode ?\r\n            <TextField\r\n                size={'small'}\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={changeTitle}\r\n                autoFocus\r\n                onBlur={activateViewMode}\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <TextFormatRounded/>\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            /> :\r\n            <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from '../trash/App';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {CheckCircleRounded, DeleteRounded} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    todoListID: string\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeTodoListFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todoListID: string) => void\r\n    changeTodoListTitle: (newValue: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    todoListFilter: FilterValuesType\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID);\r\n    }\r\n\r\n    const onFilterClickHandler = (filterValue: FilterValuesType) => {\r\n        return () => props.changeTodoListFilter(filterValue, props.todoListID);\r\n    }\r\n\r\n    const onClickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n    const onChangeTitleHandler = (newValue: string) => {\r\n        props.changeTodoListTitle(newValue, props.todoListID)\r\n    }\r\n\r\n    return <div>\r\n        <h3 style={{textAlign: \"center\"}}>\r\n            <EditableSpan title={props.title} onChange={onChangeTitleHandler}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div style={{listStyle: \"none\", paddingLeft: \"0px\" }}>\r\n            {\r\n                props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.todoListID)\r\n                    const isDoneHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(t.id, event.currentTarget.checked, props.todoListID)\r\n                    }\r\n\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.todoListID)\r\n                    }\r\n\r\n\r\n                    return <div key={t.id}>\r\n                        <Checkbox\r\n                            size={'small'}\r\n                            color={'primary'}\r\n                            checked={t.isDone}\r\n                            onChange={isDoneHandler}\r\n                            icon={<CheckCircleRounded />}\r\n                            checkedIcon={<CheckCircleRounded />}\r\n                        />\r\n                        <span className={t.isDone ? 'isDone' : ''}>\r\n                        <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                        </span>\r\n                        <IconButton size={'small'} onClick={onClickHandler}>\r\n                            <DeleteRounded fontSize={\"small\"}/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <ButtonGroup variant=\"text\" aria-label=\"text primary button group\">\r\n            <Button\r\n                size=\"small\"\r\n                style={{margin: \"3px\"}}\r\n                color={props.todoListFilter === 'All' ? 'secondary' : 'primary'}\r\n                onClick={onFilterClickHandler(\"All\")}>\r\n                All\r\n            </Button>\r\n            <Button\r\n                size=\"small\"\r\n                style={{margin: \"3px\"}}\r\n                color={props.todoListFilter === 'Active' ? 'secondary' : 'primary'}\r\n                onClick={onFilterClickHandler(\"Active\")}>\r\n                Active\r\n            </Button>\r\n            <Button\r\n                size=\"small\"\r\n                style={{margin: \"3px\"}}\r\n                color={props.todoListFilter === 'Completed' ? 'secondary' : 'primary'}\r\n                onClick={onFilterClickHandler(\"Completed\")}>\r\n                Completed\r\n            </Button>\r\n        </ButtonGroup>\r\n            <IconButton style={{margin: \"10px 0 0 45px\"}} size={'small'} onClick={onClickRemoveTodoList}>\r\n                <DeleteRounded color={'primary'}/>\r\n            </IconButton>\r\n\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import {TaskStateType} from \"../../trash/App\";\r\nimport {v1} from \"uuid\";\r\nimport {addTodoListAC, removeTodoListAC} from \"./TodoListReducer\";\r\n\r\nconst CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\r\nconst REMOVE_TASK = 'REMOVE-TASK'\r\nconst ADD_TASK = 'ADD-TASK'\r\nconst CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE'\r\nconst ADD_TODOLIST = 'ADD-TODOLIST'\r\nconst REMOVE_TODOLIST = 'REMOVE-TODOLIST'\r\n\r\n\r\n\r\nexport type TaskActionType = ReturnType<typeof removeTaskAC>|\r\n    ReturnType<typeof addTaskAC>|\r\n    ReturnType<typeof changeTaskStatusAC>|\r\n    ReturnType<typeof changeTaskTitleAC>|\r\n    ReturnType<typeof addTodoListAC>|\r\n    ReturnType<typeof removeTodoListAC>\r\n\r\nconst initialState: TaskStateType = {};\r\n\r\nexport const taskReducer = (state= initialState, action: TaskActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case REMOVE_TASK :\r\n            return {...state,\r\n                [action.todoListID]: state[action.todoListID].filter(t => t.id !== action.taskID)}\r\n        case ADD_TASK:\r\n            return {...state, [action.todoListID]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todoListID]]}\r\n        case CHANGE_TASK_STATUS:\r\n            return {...state,\r\n                [action.todoListID]: state[action.todoListID].map(m => m.id === action.taskID ? {...m, isDone: action.isDone}: {...m})}\r\n        case CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                   [action.todoListID]: state[action.todoListID].map(m => m.id === action.taskID ? {...m, title: action.title}: {...m}) }\r\n        case  ADD_TODOLIST:\r\n            return  {\r\n                ...state,\r\n                [action.todoListID]: []\r\n            }\r\n        case  REMOVE_TODOLIST:\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todoListID]\r\n            return stateCopy\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todoListID: string) => ({\r\n        type: REMOVE_TASK,\r\n        taskID,\r\n        todoListID\r\n    } as const\r\n)\r\n\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string) => ({\r\n        type: CHANGE_TASK_STATUS,\r\n        taskID,\r\n        isDone,\r\n        todoListID\r\n    } as const\r\n)\r\n\r\nexport const addTaskAC = (title: string, todoListID: string) => ({\r\n        type: ADD_TASK,\r\n        title,\r\n        todoListID\r\n    } as const\r\n)\r\n\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string) => ({\r\n        type: CHANGE_TASK_TITLE,\r\n        taskID,\r\n        title,\r\n        todoListID\r\n\r\n    } as const\r\n)\r\n\r\n","import {FilterValuesType, TodolistType} from \"../../trash/App\";\r\nimport {v1} from \"uuid\";\r\n\r\nconst CHANGE_FILTER = 'CHANGE-TODOLIST-FILTER'\r\nconst REMOVE_TODOLIST = 'REMOVE-TODOLIST'\r\nconst ADD_TODOLIST = 'ADD-TODOLIST'\r\nconst CHANGE_TITLE = 'CHANGE-TODOLIST-TITLE'\r\n\r\nexport type TodoListActionType = ReturnType<typeof removeTodoListAC> |\r\n    ReturnType<typeof changeTodoListFilterAC> |\r\n    ReturnType<typeof addTodoListAC> |\r\n    ReturnType<typeof changeTodoListTitleAC>\r\n\r\nconst initialState: Array<TodolistType> = [];\r\n\r\n\r\nexport const todoListReducer = (state = initialState, action: TodoListActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST :\r\n            return state.filter(tl => tl.id !== action.todoListID)\r\n        case CHANGE_FILTER:\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.value} : {...tl})\r\n        case ADD_TODOLIST:\r\n            return [{id: action.todoListID, title: action.title, filter: \"All\"}, ...state]\r\n        case CHANGE_TITLE:\r\n            return state.map(tl => tl.id === action.toddListID ? {...tl, title: action.title} : {...tl})\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const changeTodoListFilterAC = (value: FilterValuesType, id: string,) => ({\r\n        type: CHANGE_FILTER,\r\n        value: value,\r\n        id: id\r\n    } as const\r\n)\r\n\r\nexport const removeTodoListAC = (todoListID: string) => ({\r\n        type: REMOVE_TODOLIST,\r\n        todoListID\r\n    } as const\r\n)\r\n\r\nexport const addTodoListAC = (title: string) => ({\r\n        type: ADD_TODOLIST,\r\n        title,\r\n        todoListID: v1()\r\n    } as const\r\n)\r\n\r\nexport const changeTodoListTitleAC = (title: string, toddListID: string) => ({\r\n        type: CHANGE_TITLE,\r\n        toddListID,\r\n        title\r\n\r\n    } as const\r\n)\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/TaskReducer\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC\r\n} from \"./store/TodoListReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    //////\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        dispatch(removeTaskAC(taskID, todoListID));\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        dispatch(addTaskAC(title, todoListID));\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        dispatch(changeTaskStatusAC(taskID, isDone, todoListID));\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n        dispatch(changeTaskTitleAC(taskID, title, todoListID));\r\n    }\r\n\r\n    /////\r\n\r\n    function changeTodoListFilter(value: FilterValuesType, todoListID: string) {\r\n        dispatch(changeTodoListFilterAC(value, todoListID))\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        const action = removeTodoListAC(todoListID)\r\n        dispatch(action)\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let action = addTodoListAC(title)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeTodoListTitle(title: string, todoListID: string) {\r\n        dispatch(changeTodoListTitleAC(title, todoListID));\r\n    }\r\n\r\n\r\n    const todoListsComponents = todolists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id];\r\n\r\n        if (tl.filter === 'Active') {\r\n            tasksForTodoList = tasks[tl.id].filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === 'Completed') {\r\n            tasksForTodoList = tasks[tl.id].filter(t => t.isDone)\r\n        }\r\n\r\n        return <Grid item key={tl.id}>\r\n            <Paper style={{padding: \"10px\"}}>\r\n                <Todolist\r\n                    todoListID={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodoList}\r\n                    removeTask={removeTask}\r\n                    changeTodoListFilter={changeTodoListFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    removeTodoList={removeTodoList}\r\n                    todoListFilter={tl.filter}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n\r\n    return (\r\n        <div className={\"App\"}>\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button variant={\"outlined\"} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListReducer} from \"./TodoListReducer\";\r\nimport {taskReducer} from \"./TaskReducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todoListReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}