{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/appReducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","changeTodolistEntityStatusAC","entityStatus","addTaskTC","res","resultCode","task","item","addTaskAC","catch","err","message","handleServerNetworkError","finally","updateTaskTC","domainModel","getState","tasks","find","t","console","warn","apiModel","deadline","description","priority","startDate","action","updateTaskAC","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dd9c319.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd5ee63b2-b8ea-4e76-b89c-c960812b3f51'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as null | string,\r\n}\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n}as const)\r\nexport const setAppErrorAC = (error: string | null) =>({\r\n    type: 'APP/SET-ERROR',\r\n    error\r\n}as const)\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>\r\n\r\n","import { setAppErrorAC, setAppStatusAC } from '../app/appReducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all' , entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus}: tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n            .catch((err: AxiosError)=>{\r\n                dispatch(setAppErrorAC(err.message))\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setAppStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(changeTodolistEntityStatusAC(todolistId,'loading'))\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                }else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Error. Please contact administration'))\r\n                    }\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId,'failed'))\r\n                }\r\n            })\r\n            .catch((err: AxiosError)=>{\r\n                dispatch(setAppErrorAC(err.message))\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setAppStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err: AxiosError)=>{\r\n                dispatch(setAppErrorAC(err.message))\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setAppStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n            .catch((err: AxiosError)=>{\r\n                dispatch(setAppErrorAC(err.message))\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setAppStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/appReducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n        })\r\n        .catch((err: AxiosError)=>{\r\n            dispatch(setAppErrorAC(err.message))\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n        .catch((err: AxiosError)=>{\r\n            dispatch(setAppErrorAC(err.message))\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError)=>{\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n            .catch((err: AxiosError)=>{\r\n                dispatch(setAppErrorAC(err.message))\r\n            })\r\n            .finally(()=>{\r\n                dispatch(setAppStatusAC('idle'))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/appReducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/appReducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./appReducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' &&\r\n            <LinearProgress color={\"secondary\"}/>\r\n            }\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./appReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}